#ifndef __ASYNC_FSM__
#define __ASYNC_FSM__

#include "Arduino.h"

#define MAX_EVQUEUE_SIZE 20 
#define NUM_PINS 13

/**
 * Class representing an event
 */
class Event {
  public:
    Event(int type, String msg);
    int getType();
    String getMsg();

  private:
    int type;
    String msg;
};

/**
 * Class representing event observers, observing Event.
 */
class Observer {
  public:
    virtual void notifyEvent(Event* ev);    
};

/**
 * Base class representing an event source, generating Event
 * observed by an Observer.
 */
class EventSource {
  public:
    void registerObserver(Observer* observer);

    /* called by to generate an event to be observed by the observer */ 
    void generateEvent(Event* ev);

    Observer* observer;
}; 

/**
 * Class representing an event queue, used inside the async FSM
 */
class EventQueue {      
  public:
    EventQueue();
    bool isEmpty();
    void enqueue(Event* ev);
    Event* dequeue();  
  private:
    Event* queue[MAX_EVQUEUE_SIZE];
    int head, tail; 
};

/**
 * Base abstract class for implementing asynchronous
 * Finite State Machines.
 * 
 * NOTES:
 * - it is an Observer of events generated by event source
 * - the state is meant to be modelled by derived classes
 */
class AsyncFSM : public Observer {
public:
  virtual void handleEvent(Event* ev) = 0;
  void notifyEvent(Event* ev);  
  void checkEvents();  

protected:
  AsyncFSM();    
  EventQueue eventQueue;
};

#endif
